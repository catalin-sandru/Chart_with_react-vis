{"version":3,"sources":["component/table.js","component/legend/legend.style.js","component/legend/legend.component.js","component/chart/chart.style.js","component/chart/index.js","component/chart/chart.component.js","App.js","serviceWorker.js","index.js"],"names":["table1","label","angle","style","fill","stroke","innerRadius","key","table2","LegendStyle","styled","div","_templateObject","LegendButtonsWrapper","_templateObject2","props","color","ButtonWrapper","_templateObject3","ChartLegend","_ref","data","toogleHighlightOn","resetTable","loadSecondTable","react_default","a","createElement","map","_ref2","onClick","DefaultChartStyle","chart_style_templateObject","Chart","state","default","_this","item","Object","objectSpread","setState","setTable","sum","find","n","toConsumableArray","this","_this2","es","width","height","showLabels","padAngle","radius","labelsRadiusMultiplier","animation","legend_component","Component","App","className","chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd21b2bc.chunk.js","sourcesContent":["export const table1 = [\r\n  {\r\n    label: \"p\",\r\n    angle: 5,\r\n    style: {fill: \"#1A3177\", stroke: 0},\r\n    innerRadius: 0,\r\n    key: 0\r\n  },{\r\n    label: \"ne\",\r\n    angle: 2,\r\n    style: {fill: \"#79C7E3\", stroke: 0},\r\n    innerRadius: 0,\r\n    key: 1\r\n  },{\r\n    label: \"nu\",\r\n    angle: 2,\r\n    style: {fill: \"#12939A\", stroke: 0},\r\n    innerRadius: 0,\r\n    key: 2\r\n  },{\r\n    label: \"na\",\r\n    angle: 1,\r\n    style: {fill: \"#FF9833\", stroke: 0},\r\n    innerRadius: 0,\r\n    key: 3\r\n  }\r\n]\r\n\r\nexport const table2 = [\r\n  {\r\n    label: \"p\",\r\n    angle: 6\r\n    },{\r\n    label: \"ne\",\r\n    angle: 2\r\n    },{\r\n    label: \"nu\",\r\n    angle: 1\r\n    },{\r\n    label: \"na\",\r\n    angle: 1\r\n  }\r\n\r\n]","import styled from 'styled-components'\r\n\r\nexport const LegendStyle = styled.div`\r\n  align-self: center;\r\n`\r\n\r\nexport const LegendButtonsWrapper = styled.div`\r\n  p {\r\n    background: ${props => props.color.fill};\r\n    color: #fff;\r\n    font-size: 1rem;\r\n    padding: 0.3rem;\r\n    border: 1px solid grey;\r\n    border-radius: 0.2rem;\r\n    cursor: pointer;\r\n  }\r\n\r\n  li {\r\n    list-style-type: none;\r\n  }\r\n`\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  button {\r\n    padding: 0.4rem;\r\n    margin: 0.5rem 0;\r\n    border: 3px solid #A9A9A9;\r\n    border-radius: 0.3rem;\r\n    cursor: pointer;\r\n    outline: none;\r\n    background: rgba(185, 24, 33, 0.8);\r\n    color: #fff;\r\n\r\n    &:nth-last-of-type(1) {\r\n      background: rgba(66, 194, 69, 0.8)\r\n    }\r\n  }\r\n\r\n`","import React from 'react'\r\nimport { LegendStyle, ButtonWrapper, LegendButtonsWrapper } from './legend.style';\r\n\r\nconst ChartLegend = ({data, toogleHighlightOn, resetTable, loadSecondTable}) => {\r\n  return(\r\n    <LegendStyle>\r\n        {data.map(({label, angle, style, key}) => {\r\n          return(\r\n            <LegendButtonsWrapper color={style} key={key}>\r\n              <p onClick={() => toogleHighlightOn(key)}>\r\n                {label}: {angle}\r\n              </p>\r\n            </LegendButtonsWrapper>\r\n          )\r\n        })}\r\n        <ButtonWrapper>\r\n          <button onClick={resetTable}>Table 1</button>\r\n          <button onClick={loadSecondTable}>Table 2</button>\r\n        </ButtonWrapper>\r\n      </LegendStyle>\r\n    )\r\n}\r\n    \r\nexport default ChartLegend","import styled from 'styled-components'\r\n\r\nexport const DefaultChartStyle = styled.div`\r\n  display: inline-flex;\r\n`","import Chart from './chart.component'\r\nexport default Chart","import React, { Component } from 'react';\r\nimport { RadialChart } from 'react-vis';\r\nimport { table1, table2 } from '../table'\r\nimport ChartLegend from '../legend/legend.component';\r\nimport { DefaultChartStyle } from './chart.style';\r\n\r\nclass Chart extends Component {\r\n  state = {\r\n    default: table1,\r\n    data: [],\r\n    toogleHighlightOn: this.toogleHighlightOn\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetTable()\r\n  }\r\n\r\n  toogleHighlightOn = key => {\r\n    const data = this.state.data.map(\r\n      item => item.key === key \r\n        ? {...item, innerRadius: 2} \r\n        : {...item, innerRadius: 0}\r\n    )\r\n    this.setState({ data })\r\n  }\r\n\r\n  resetTable = () => {\r\n    this.setState({data: this.state.default})\r\n  }\r\n\r\n  loadSecondTable = () => {\r\n    const setTable = table1.map(item => {\r\n      const findItem = table2.find(n => n.label === item.label)\r\n      const sum = findItem.angle + item.angle\r\n      return {\r\n        ...item, angle: sum\r\n      }\r\n    })\r\n    return this.setState({\r\n      data: [...setTable]\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.state\r\n    return(\r\n      <DefaultChartStyle>\r\n        <RadialChart\r\n          data={data}\r\n          width={400}\r\n          height={400}\r\n          innerRadius={80}\r\n          showLabels={true}\r\n          padAngle={0.03}\r\n          radius={120}\r\n          labelsRadiusMultiplier={0.9}\r\n          animation={\"wobbly\"}\r\n        />\r\n        <ChartLegend \r\n          data={data}\r\n          toogleHighlightOn={this.toogleHighlightOn}\r\n          resetTable={() => this.resetTable()}\r\n          loadSecondTable={() => this.loadSecondTable()}\r\n        />\r\n      </DefaultChartStyle>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chart","import React from 'react';\r\nimport './App.css';\r\nimport Chart from './component/chart/';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Table 1</h1>\r\n      <Chart/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}